from pydantic import BaseModel
from datetime import datetime
from typing import List, Optional


##### User Schema #####
class UserBase(BaseModel):
  username: str
  email: str
  password: str

class UserDisplay(BaseModel): # what is displayed to the user
  username: str
  email: str
  
  class Config():
    orm_mode = True
    
 ##### User Schema #####   



# For BatchDisplay
class User(BaseModel):
  user_id: int
  class Config():
    orm_mode = True
    
# For BatchDisplay
class Task(BaseModel):
  task_name: str
  task_description: str
  username: str
  class Config():
    orm_mode = True
    
  
##### Batch Schema #####
class BatchBase(BaseModel):
    batch_title:str
    #assignees_id:int
    color_tag: str
    start_date: datetime
    #start_time: datetime
    end_date:  datetime
    #end_time: datetime
    # location: str
    description: Optional[str] = None
    created_by: int
    # created_at: datetime
    # updated_at: datetime
    # last_updated_by: str
    # reveiw_status: str
    # reviewed_by: str
    # duration: int
    # final_ouput: str
    # final_ouput_qty:int
    # status: str # 'Pending', 'In progress', 'Complete', 'Aborted', 'Delayed', 'On hold'
    # is_active: bool
    tasks: List[Task]
    
    class Config():
      orm_mode = True

class BatchDisplay(BaseModel): # what is displayed
    id:int
    batch_title:str
    description: str
    tasks: List[Task] = [] 
    
    class Config():
      orm_mode = True





class TaskBase(BaseModel):
  batch_id: int #(FK)
#   creator_id: int
#   incident_id: int
#   assignee_ids: List[int] # list of assignee ids
#   machinery_id:int
#   alert_user_id: int
#   task_name: str
#   task_description: str
#   task_stage: int
#   task_type:str
#   estimated_duration: int # in minutes
#   output_product: str # product name
  status: str # 'Pending', 'In progress', 'Complete', 'Aborted', 'Delayed', 'On hold'
#   outputs: str
#   output_qty: str
#   start_time: datetime
#   end_time: datetime
#   is_active: bool
#   created_at: datetime
  created_by: int
  updated_at: datetime
  #last_updated_by_user_id: int
  task_notes: str

  class Config():
    orm_mode = True


class TaskDisplay(BaseModel):  # what is displayed
  id: int #(PK)
  created_by: User
  updated_at: datetime


class UserAuth(BaseModel):
  id: int
  username: str
  email: str
